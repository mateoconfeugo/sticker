(ns management.controllers.public
  ^{:author "Matthew Burns"
    :doc "Entrance and Exit webpages of the application along with a redirect to the login page"}
  (:require [cemerick.friend :refer [logout*]]
            [compojure.core :refer [defroutes GET]]
            [ring.util.response :refer [file-response redirect]]))

(defroutes public-routes
  (GET "/" [] (redirect "/login"))
  (GET "/logout" req (logout* (redirect (str (:context req) "/"))))
  (GET "/signup" [req] (file-response "templates/signup.html" {:root "resources"}))
  (GET "/login" [] (file-response "templates/login.html" {:root "resources"})))

(comment
  (defn- create-user
    [{:keys [username password admin] :as user-data}]
    (-> (dissoc user-data :admin)
        (assoc :identity username
               :password (creds/hash-bcrypt password)
               :roles (into #{::users/user} (when admin [::users/admin])))))

  (POST "/signup" {{:keys [username password confirm] :as params} :params :as req}
        (if (and (not-any? str/blank? [username password confirm])
                 (= password confirm))
          (let [user (create-user (select-keys params [:username :password :admin]))]
            ;; HERE IS WHERE YOU'D PUSH THE USER INTO YOUR DATABASES if desired
            (friend/merge-authentication
             (resp/redirect (misc/context-uri req username))
             user))
          (assoc (resp/redirect (str (:context req) "/")) :flash "passwords don't match!"))))
