Landing site system manifesto

ASSUMPTION: More qualified LEADS will lead to more CONVERSIONS
ASSUMPTION: CARRYING THE SCENT and reducing the BAD STEREOTYPE is going to lead to more LEADS
ASSUMPTION: Understanding the right aspects to use to tailor the experience to each user agent will cause more CONVERSIONS.
ASSUMPTION: Accurate profiling will cause more CONVERSIONS.
ASSUMPTION: Each actual DEMOGRAPHIC PROFILE has a best way of delivering content via a LANDING SITE or VERTICAL SITE as to maximize the possible number of collected LEADS from that profile.
ASSUMPTION: How badly you have misprofiled some agent is quantifiable via BAD STEREOTYPE FACTOR.
ASSUMPTION: The smaller the BAD STEREOTYPE FACTOR an CAMPAIGNS AD GROUP has, the larger number of qualified LEADS will be collected.
ASSUMPTION: A agent request that has a projection along the DEMENSION PROFILE and always CONVERTS has a BAD STEREOTYPE FACTOR of 0.

GIVEN: The actual DEMOGRAPHIC PROFILE versus the associated DEMOGRAPHIC PROFILE represents the BAD STEREOTYPE FACTOR

The point of the LANDING SITE is to generate LEADS.

A CONVERSION is a LEAD that ends up in a SALE.

LEADS will be generated by a user filling out a HTML form.

This data will be submitted in an ajax fashion to a web server that will log the the LEAD DATA in a database.

The data will also be piped to an automated Instant Message client or email client.

These clients will route the data to the relevant party (call center representative).

a CONTENT NETWORK is a set of VERTICAL SITES each specializing in some aspect that is going to drive traffic to a LANDING SITE.

VERTICAL SITES are composed of WEB PAGES. WEB PAGES are a set sequentially related web pages that CARRY THE SCENT in some way.

VERTICAL SITES simulate PUBLISHERS pushing TRAFFIC to our LANDING SITE.

VERTICAL SITES use the same dynamic feedback that customizes the site experience for each USER.

TRAFFIC is also and more primarily pushed to the LANDING SITE via 3rd part AD-NETWORKS.

The LANDING SITE WEB APP (LSWA) is a hybrid single page/tradition web of pages program in the form of a javascript app, json configs and the traditional html, css, and image resources.

The CMS will publish the various site specific resources to the LANDING SITE BIZ SERVER (LSBS).

The job of the LSBS is to service the tradtional http request along with the json REST channel that powers the single web page aspect of the LSWA.

The AD-NETWORK TUPLE contains the keyword, ad, and landing page metrics in relation to one another. This object participates in determining the quality of how an ad is ultimately working.

The AD-NETWORK gets WEB BROWSERS to point at the LANDING SITE. This causes the LSWA to be loaded and open a two way asynchronos data messaging channel with the LSBS.

3rd party AD-NETWORK's CAMPAIGN are organized in such a way to facilite the FLOURISH ONLINE A/B TESTING SUITE.

The LSBS will service redirects to it.  These redirects will be in the form of base_uri.com/[ad_network_id]/[campaign_id]/[ad_group_id]/[A|B|C].  This will allow the LSBS to know which of several COMPETING ads has caused the traffic.  The LSBS can uses this knowledge to update the LSWA as well as alter the form of the HOSTING DOM for the LSWA.

The LANDING SITE has a SITE MAP that intialialy has normal hyperlinks to normal webpages; however, after the javascript client part of the LSWA has uploaded the content of the traditional html pages into the single page web app, these links are replaced so they cause the navigation show a different PAGELET.

A PAGELET simulates a traditional HTML page but rather than redirecting the users WEB BROWSER to a real URL ADDRESS, it servers as the replacement dom that the web app displays in page manner that looks identical to the traditional manner.

This set of relacement operations can be customized for each user based on demographic or ad related data.

The FLOURISH ONLINE A/B TESTING SUITE is a systematic way of improving the relevent metric.

Nomenclature of ADNETWORK CAMPAIGNS or the naming format:
[distributor grouping tag]-[type of campaign]-[demographic]-[conversion type]-[desired price per conversion]

The LANDING SITE itself has a part of the JSON API dedicated to allow client programs to query, adjust, maintain, monitor, and alert the web app.  Data obtained this way can be used to ascertain the relevant and germane real time and other data.

The LANDING SITE itself has a part of the JSON API dedicated that allow a human admin user to gain relevent information or affect the LANDING site some manner.

Each ADNETWORK Campaign is tied to a LANDING PAGE SITE.  Each site has a default dom host, javascript client single page web app and the default set of pages for the site.

Each AD-GROUP in the CAMPAIGN is tied to a specific category in the site.

These CATEGORY has pages that replace or augment the default categories or parent categories stories(A/B).  Further each CATEGORY has custom tailored OFFER(s) associated with it.

Mapping a request into DEMOGRAPHIC VECTORS that the web application can use as offers to lure the user along and FLOW THE SCENT to the LEAD FORM and delivery them to correct DESTINATION SITE THANK YOU PAGE.

A POPULATION MATRIX consists of all the unique browser visits to either VERTICAL SITES or LANDING SITES on any partner.
A row vector in the POPULATION MATRIX represents on unique agent known to the FLOURISH ONLINE NETWORK
Each column in the POPULATION MATRIX represents a demographic dimension on how browser agents are quantified.

A PROFILING VECTOR particular set of DEMOGRAPHIC DIMENSIONS in the POPULATION MATRIX.

A  DEMOGRAPHIC PROFILE  is the result of a  projection of a PROFILING VECTOR   against the POPULATION MATRIX.

A request coming into either a (LANDING SITE or VERTICAL SITE) server will serve as an UNCATERGORIZED DEMOGRAPHIC VECTOR.

The UNCATERGORIZED DEMOGRAPHIC VECTOR will be projected against the POPULATION MATRIX and the result will be put into the NEAREST tagged DEMOGRAPHIC PROFILE.

Particular categories of the VERTICAL SITES or LANDING Sites are mapped to specific categories of the forementioned sites.

Thus when a request comes into a VERTICAL SITE or LANDING SITE, it gets PROFILED and thus provides the key that maps to the correct category.  The LSBS.

The DEMOGRAPHIC PROFILE is encoded in the AD-NETWORK LISTING AD destination uri.

How the TRAFFIC INSTANCE enters either LANDING SITE or VERTICAL SITE tells us what DEMOGRAPHIC PROFILE was associated with that ad.

Feedback is used by monitoring the result of A/B testing to decrease the BAD STEREOTYPE FACTOR and also find what the actual DEMOGRAPHIC PROFILE is for a particular campaign.

This adusting to statify a criteria will converge to find the RESONANT FREQUENCY that LINKS the KEYWORD SET (keyword bucket), Ad, and Landing Site that best CARRIES THE SCENT such that the ads receive the best possible quality rating.

It seems wise to have one CAMPAGIN linked to one LANDING SITE to one DEMOGRAPHIC PROFILE.

The different aspects of the DEMOGRAPHIC PROFILE are targeted and serviced via the associated CATEGORIES.

Each LANDING SITE can support multiple demographic and CAMPAGINS.

The LANDING SITE BIZ SERVER hosts multiple LANDING SITES and thus MARKET VECTORS.


TACTICAL

Each customer gets the following:
* Virtual debian instance
* github repository
* cms site
* mysql database server

The physical files that make up CMS driven Single Page Web Application come from two places:
1) The Catalyst JSON REST server and the Javascript Client Graphical User Interface - comes from github
2) The content pushed into the servers filesystem from the CMS to be used by the server - comes from the cms server

Release Process Mechanism
1) cpanm using the new github and versioning features
2) publishing from bricolage using bric_soap
3) cronjob that runs every ten minutes running 1 and 2

Landing Site Biz Server File System

    root/
        static/
              css/
              img/
              images/
              font/
              js/
                lib/
                collections/
                routers/
                models/
                views/
                jemplate/
        lib/
            site/
                footer
                header
                wrapper
                stage
                top_menu
                layout
                html
                javascript
            config/
                main
                color
                url
                skins
                    admin
                    style_cfg

        src/
            site_matrix.json
            market_vector_1/
                default/
                      index.html
                      page_one.html
                      page_two.html
                      page_one.json
                      page_two.json
                      offer.json
                      profile.json
                adgroup_1/
                      page_two.json
                      offer.json
                      sub_profile.json
                adgroup_2/
                      page_two.json
                      offer.json
                      sub_profile.json


Landing Site Biz Server REST API

by the time the LSWA is using the api it has a session cookie

    /api/rest/
             page
             config/
             profile/
             offer/

Incoming HTTP Request Cycle.

The underlying idea is that the url is going to be used to determine what batch of resources are going to be linked together.
These links form a customized site for the individual browser/cookie.  A further driving force is the accounting aspect associated with crediting the correct source of traffic.

Decoded url information:
    http://[domain-name]/ad-network/1/campaign/1/ad_group/1/listing/A
    token = 111A

the token is associated with a marketing vector via a look-up table.
The marketing vector id serves as an index into the site_matrix data structure to get more granular information.
    * demographic profile
    * offer
    * keywords

    account             => 1,
    ad_network          => 1,
    campaign            => 1,
    ad_group            => 1,
    listing             => A,
    market_vector       => 1,
    demographic_profile => 1,
    offer               => 1

Based on all this information, the session is populated and the site is rendered using the correct set of urls.
The response contains the session cookie, the host dom with robot indexable links, and the javascript single page web app.

Lead Generation Form Request Cycle:

The browser has gotten to the lead generation form and submitted the information.
The information is saved in the database and the user is redirected to the specified url in the market vector.


Logging
Documentation

*  Developing, Testing, Releasing, Deploying, Maintaining, Provisioning
How to be a one armed paper hanger
Using pallet, lein, vmfest, expections and clj-driver to automate your development provisioning release deployment testing system admin stuff
especially if running a web based service.

* What is my Approach?
By effectively combining the various use of clojure libraries one can eliminate 
 much of the drudgery of developing, testing, releasing, deploying and maintaining software
* What are the features that make that happen
Provide major components of a continuous delivery system
Programmatically provision system resources
Run your system of many servers on different providers  via simple single command line commands
Automated end to end testings
Test your system in the different computing environments with real servers and real web browsers
Organize and automate your common tasks in a easily reusable way.
* Pieces
Clojure
Pallet
Lein
Vmfest
Expectations
clj-driver

* Clojure?
Its a lisp based programming language that runs on the java virtual machine and it takes the form of a java library so all sorts of interop is possible and pretty easy.  Clojure does demand you raise your game and pays you richly for doing so.  Clojure is a very powerful pragmatic language thats not very dogmatic. 

* What is pallet?
** They say
Pallet is platform for agile and programmatic automation of infrastructure in the cloud, on server racks or directly on virtual machines. Pallet provides cloud provider and operating system independence, and allows for an unprecedented level of customization.
Pallet is a clojure libary that compiles DSL functions  down to a set shell commands which are run across an ssh connection.

* Pallet Concepts
** The Node
** Node Specs
** The Computing Service Provider
*** Getting Setup
**** Access 
**** Controlling your environment
** Server Specs
** Group Specs
** Operations
*** Converge
*** Lift
** Crates
** Actions

* What is lein?
Leiningen is the easiest way to use Clojure. With a focus on project automation and declarative configuration, it gets out of your way and lets you focus on your code. lein is the command line implemenation tool of the leiningen project.

* Lein concepts
** Plugins

* What is vmfest?
VMFest is a PalletOps project to turn VirtualBox into a light-weight cloud provider. This is very useful for when developing cloud automation. VirtualBox's Virtual Machines (VMs) boot very quickly (seconds), so why not take advantage of it?
VMFest takes the form of a library, and you can use it as a toolkit to create your own virtualization environments.

* What is clj-driver
This is a Clojure library for driving an actual web browser using Selenium-WebDriver as the backend. This allows you to acturatelly run simulation of user interations with your application.  Provides higher-level Clojure functions to make interacting with the browser easier.

* What is expectation 
expectations is a minimalist's testing framework
Simply require expectations and your tests will be run on JVM shutdown.
What you are testing is inferred from the expected and actual types
Stacktraces are trimmed of clojure library lines and java.lang lines
Focused error & failure messages

* How it works together to make your life easier

** lein pallet plugin
A leiningen plugin for running pallet tasks for a pallet deployment project.
*** How to
Make a Crate
Pass arguments to converge/lift operations

** Release/Deploy/Maintain on the following conceptal system environments
*** Locally - dev
*** On virtual machines  running locally - dev-qa
*** On cloud test servers
*** On cloud QA servers
*** On cloud production blue
*** On cloud production green

** lein expectations
A leiningen plugin to make running tests written using expectations library.

** lein autoexpect 
Leiningen plug-in for automatically running expectations whenever your Clojure project's source changes.

* Organize
** Levels of organization
*** 
*** Dev Ops
pallet group specs and crates that set up 3rd party software
*** System Provisioning
pallet group specs, crates and cluster spect that create complete working systems.  
This is the functional business implemented in is various configurations.
Now lein pallet is used to spin up the system in the following manners
**** locally
**** virtual box machine
****  existing node
****  provision new node on the cloud
test
qa
dev pod
new customer
green blue deployment

*** Project
the server group spec and crates for our software
*** Test
How you organize all this is key
Project level unit, component, acceptance tests will use resources from dev-ops and other projects
System level acceptance tests will be in dev-ops
Business level acceptance tests will be in provisioning
 
** Namespaces
[project-name].nodes.[domain-of-concern]
[project-name].servers.[domain-of-concern]
[project-name].groups.[domain-of-concern]
** Configurations
project.clj
pallet.clj

* Development Aspect
** tools and techniques
nrepl
lein with-profile pallet repl :headless
nrepl-interaction-mode
lein uberjar

* Testing aspect
Tests can spin up the system in the desired environment and have control the web browser
to perform actions against the system then check the various pieces to test for the desired
affect. Using autoexpect you can always be running your tests as you run your system in 
a local environment or on virtual boxes.  Since pallet is just a library its very easy to
programmaticaly do whatever.

** Project Unit Tests
** Project Component Tests
** Project Acceptance Tests

** Business Acceptance Tests


* Documentation aspect
lein plugin to extract documentation from code and present it in a nice format.

* Release and Versioning aspects

* Deployment Aspect
Examples of the different deployment operations 
**  lein pallet  converge monitoring.groups.monitoring/monitoring 2 -P :vmfest
Create 2 virtual box instances of the node described in the ~/.pallet/services/vmfest.clj file and name them according to the group spec referred via its namespace. 
** lein pallet  lift monitoring.groups.monitoring/monitoring  -P :vmfest
Apply the server-specs to the specified group of existing nodes
**  lein pallet  converge monitoring.groups.monitoring/monitoring 0 -P :vmfest
Teardown the system
**  lein pallet  converge monitoring.groups.monitoring/monitoring 1 -P :qa-cloud
creates 1 node in the cloud with a qa node and installs the monitoring group specification 

* Maintaince
Since its ultimately shell over ssh (s.o.s) and its just a clojure library.  
Create a seperate lein project dedicated to maintenace.
Capture maintenance in code.
Automate with cron if possible
Monitoring data
Log data
Users Groups
Email

* Provisioning
Since its ultimately shell over ssh (s.o.s) and its just a clojure library.  
Its very easy to programmaticaly do whatever.
Spin up an entire new instance of your infrastructure.

* Tips
Factor common support server os instances into a dev-ops project for the system
Factor common maintenance tasks for system into a maintenance project system
Create a provisioning project to combine all the servers together in a repeatable way

* System Architecture Description
** Load balancer ???
** Web server proxy (nginx)
** Database server (mysql)
** Configuration Server (zookeeper)
** File Server (nfs)
** Application Server wine-celler.jar
** Monitoring Server (riemann)
** Cruncher (hadoop)
** Real Time Distributed Tasks (storm)
** Content Management System (bricolage)
** Email Server (postfix)

* Additional Development Architecture
** Typical publisher site
** Typical advertiser site
** Feed Partner Simulator

* System Admin Task Areas
;;======================================================================
;; Server specifications: These are the servers that make up a 
;; onlines physical presence
;; Things to specify on each
;; 1: Users and Groups
;; 2: Application and 3rd Party Packages
;; 3: Cronjobs
;; 4: Services
;; 5: Files
;; 6: Symbolic Links
;;======================================================================


